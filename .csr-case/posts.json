{
  "posts": [
    {
      "id": 1,
      "title": "7 tips for better Code Reviews  ",
      "author": "Variant",
      "content": "Yesterday a question popped up on our internal Slack workspace on how to do good code reviews on pull requests. The question prompted a lot of enthusiasm and several elaborated answers. It’s clearly an important question that affects most of us, which many have spent a lot of time reflecting on. We thought this would be a perfect opportunity to share our experiences and make a document for future reference to ensure a good development culture in different teams.\n\n<img alt=\"Slack question: “Any tips for how to do Code Reviews on Pull Requests well?” followed by indications of multiple answers.\" class=\"t u v hw aj\" src=\"https://miro.medium.com/max/2708/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png\" width=\"1354\" height=\"170\" srcSet=\"https://miro.medium.com/max/552/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 276w, https://miro.medium.com/max/1104/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 552w, https://miro.medium.com/max/1280/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 640w, https://miro.medium.com/max/1456/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 728w, https://miro.medium.com/max/1632/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 816w, https://miro.medium.com/max/1808/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 904w, https://miro.medium.com/max/1984/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 992w, https://miro.medium.com/max/2000/1\\*CLZ8c3tEfrb6HIlIcU8-mQ.png 1000w\" sizes=\"1000px\"/>\n\n“Several people are typing…”\n\nThis post will cover how to be a better “code reviewer”. We will not cover how to write better pull requests — look out for that post in the future. This post was collectively written by [Sarah Serussi](https://medium.com/u/7da026b44461?source=post_page-----ab06b87534bc--------------------------------), [Christian Brevik](https://medium.com/u/cfa2101331aa?source=post_page-----ab06b87534bc--------------------------------), [Anders Njøs Slinde](https://medium.com/u/2711ec6c31f6?source=post_page-----ab06b87534bc--------------------------------), [Magnus Dahl](https://medium.com/u/a0f0fd84ed28?source=post_page-----ab06b87534bc--------------------------------), and [Mikael Brevik](https://medium.com/u/d2e9832e3bd5?source=post_page-----ab06b87534bc--------------------------------).\n\nLet’s get on to the tips!\n\n1\\. Be nice\n===========\n\nIt is important to keep a friendly tone and an informal writing style. The characteristic west-Norwegian tart sarcasm doesn’t work very well in code reviews!\n\nThe submitter might have spent a lot of time, and mental energy on writing the code. This means they could be feeling a bit stressed, or insecure about the content of the pull request. Their subsequent “investment” in the work will be high, and when eyeing the finish line they are probably impatient about getting their code merged and into users' hands as quickly as possible.\n\nYou, as the reviewer, have the power in this situation, use it carefully and sparingly. Be nice! If there are protracted discussions that lead nowhere, move them to other platforms like Slack, with the goal of getting the pull request merged instead of dragging out the process.\n\n2\\. Take the time to understand the underlying goal for the pull request.\n=========================================================================\n\nUnderstanding the intention of a change is more important than reading it line by line. When reading just the code without any context, you will probably get a shallow view of what the code is meant to do. You might catch “trivial” errors like missing semi-colons, naming issues, stylistic changes, etc. But it is much harder to pick up on fundamental issues with the solution itself, and the problems it is trying to solve.\n\nTo do this we need to understand the intention of the code. What is it meant to amend or add? What prompted the need for the pull request? This means the reviewer needs to do more than just read the code.\n\nTake the time to fundamentally understand the context and consequences of the patch. Read the pull request description carefully, try the changes yourself (see tip #5), ask questions (see tip #6), and connect the dots. This way we can communicate on a higher level, in order to suggest alternative solutions, find logical flaws, or catch misunderstandings. It will also help us as a team to be more user centric. Instead of just commenting on the code, we can comment on solutions and functionality.\n\n3\\. Provide suggestions for improvement. Show solutions rather than problems.\n=============================================================================\n\nOften times when you are working on a bug fix or a new feature, you can get excited and/or rushed, and feel like you want to submit a pull request ASAP. Other times you might be working on a pull request for several days. Either way, it’s very easy to overlook typos, temporary log statements, or poor naming of variables when you are working on the code, that’s why the review process is so important to have.\n\nWhen reviewing code, it might be easy to look at it with a critical eye and feel like the goal is to find as many errors as possible. While it is okay to have this intention, it is important to communicate the errors in a way that is meaningful to the pull request submitter. It’s also easy to become blind to your own code, so keep that in mind when spotting such mistakes.\n\nMany platforms like GitHub or Azure DevOps have a feature that allows you to submit suggestions in pull requests. This means the reviewer can give suggestions to code changes for minor mistakes or typos, instead of defaulting to just pointing out problems and leaving it up to the submitter to figure it out.\n\nFor example, naming things is really hard, so _when (a matter of time)_ you find a poor naming choice, be constructive about it and provide an alternative instead of criticizing without helping the situation. The suggestion feature is golden in these cases.\n\nIf you find larger errors or blocks of code that could be replaced by something completely different, you should explain to the submitter what you are thinking and provide a potential solution. This can be done in person, on Slack, or in the comment section of the pull request. If a conflict arises, involve others, or count your losses.\n\n4\\. Avoid stylistic, overly nit-picky comments.\n===============================================\n\nPeople have different views on how they would prefer their code to look like. However discussing it in the comment section of a pull request might not be the appropriate time to do that. Such things should already be agreed upon and automated long before you ever get to a pull request.\n\nAt the start of a project you and your fellow developers should set the rules for what kind of automation you want to include in your project, and some sort of formatting tool is always great to have. It allows you and the people you work with to have a common set of rules — without having to think about it later. It doesn’t really matter what the rules are, as long as you all are consistent about it.\n\nSomething to keep in mind is, why you are looking at this code at all? It should be about getting more eyes on a task, but also be about learning from each other. Questions of taste are not really that relevant in this discussion.\n\n<img alt=\"Image for post\" class=\"t u v hw aj\" src=\"https://miro.medium.com/max/2048/1\\*bxIge7scfdv1W1n4c7LX2g.jpeg\" width=\"1024\" height=\"848\" srcSet=\"https://miro.medium.com/max/552/1\\*bxIge7scfdv1W1n4c7LX2g.jpeg 276w, https://miro.medium.com/max/1104/1\\*bxIge7scfdv1W1n4c7LX2g.jpeg 552w, https://miro.medium.com/max/1280/1\\*bxIge7scfdv1W1n4c7LX2g.jpeg 640w, https://miro.medium.com/max/1400/1\\*bxIge7scfdv1W1n4c7LX2g.jpeg 700w\" sizes=\"700px\"/>\n\nThe blog post authors trying to re-create an [photo from the olden times](https://miro.medium.com/max/1400/1*9u5tuiIhS9J37uFK-ZDv8A.png)\n\n5\\. Don’t be afraid to check out the changes locally!\n=====================================================\n\nThe great thing about code reviews by pull requests is that it changes the context for how you look at the code. It takes you out of the familiar setting that your IDE provides, and forces you to view the changes in a different light. That shift might help you notice mistakes you wouldn’t otherwise. This is true for both the person who opened the pull request and the reviewers.\n\nBut, sometimes there are difficulties with reviewing the code in a web-based interface. The changeset itself might be too big. In this case, you might find it difficult to navigate the changes and understand what the impact is. Other times the logic may be too complex to simply read. You’re stuck on trying to read it line-by-line and “compile it in your head” in order to understand what is happening.\n\nIn these cases, the best way to move forward is usually to check out the changes locally in your development environment. This allows you to utilize your preferred editor or IDE to navigate big changesets and run the code to understand the impact or logic complexity. In other words, compile and run the code on your machine, not in your head.\n\nThis might feel like a hurdle in order to be productive as a developer or team. You don’t want to be a roadblock in order to land changes. But a worse scenario is finding a bug much later, which could have been caught in a code review. The longer time it takes to find a bug, from the time the code was written, the more difficulty you might have trying to fix that bug.\n\n6\\. Ask (open-ended) questions.\n===============================\n\nOne can look at a pull request and think of it as a process for checking the robustness of code. And to a certain degree — it is. But that’s not all it is. It is also an act of storytelling and bookkeeping for how your code came to be in the state that it is in.\n\nTold in other words, the code by itself might not tell the whole story when others try to understand it. One part of it is comments in the code, but that might only relate to understanding the minor details of certain files or certain lines of code. A broader picture of **why** the code is how it is cannot be painted by just reading the code, the comments, or the repository history.\n\nPull requests and issues, and the discussion which surrounds them fills an important space when trying to understand the reason for decisions taken when developing solutions. That means it’s extra important to have an actual dialog in the process as it unfolds.\n\nFor you as a code reviewer, this means that if you don’t understand something, you should never be afraid to ask questions. It is very likely that someone will come along later, and ponder about the very same thing you did. This means you will help write the story of **why** something came to be, not only what came to be. And at the same time, the person who opened the pull request might reflect on how they have solved a particular problem, and choose to do it differently if needed.\n\nIt’s important to note that while it’s fine to ask critical questions, try to frame them in such a way that a productive discussion can happen. Open-ended questions are a great tool to utilize here — don’t try to move the discussion in a certain direction which benefits just you, or put people in their place. Again, be nice (see tip #1)! Open-ended questions give you much more information than just confirming your own preconceived opinion.\n\nInstead of asking a close ended question like “This code is messy. Is this really a good way to handle this edge case?”, give the other person room to tell their story by asking “I don’t quite understand this code. Can you explain how this solves the edge case?”\n\n7\\. Optimize for throughput, not for gatekeeping.\n=================================================\n\nEveryone is better served if the pull request is merged sooner rather than later. A slow code review process that peters out into stale pull requests are very demotivating for both reviewers and submitters.\n\nIf something is out of scope then split it out into a new pull request, or take the discussion somewhere else if it can still be merged. A lot of the details can be fixed later if the code works as a whole and doesn’t break with the overall architecture. Focus on the big stuff, not the small potatoes. Look for obvious bugs and logical errors, while being more forgiving of the minor issues.\n\nThe code review process should be a valuable learning lesson and not used as a tool for gatekeeping. Remember you are in this together as a team, and the goal should be to keep the ball rolling. Both for the sake of keeping up the team motivation, but also to continually deliver value.\n\nFind out what works for you and your team. Write down your guidelines for how you want to do code reviews and find a common consensus. At the very least, have conversations on what you think good code reviews are.\n\nThat’s our 7 tips for how to do better code reviews in your team. Can you think of anything else that has worked well for you or something we’ve missed?\n\nWritten by [Sarah Serussi](https://medium.com/u/7da026b44461?source=post_page-----ab06b87534bc--------------------------------), [Christian Brevik](https://medium.com/u/cfa2101331aa?source=post_page-----ab06b87534bc--------------------------------), [Anders Njøs Slinde](https://medium.com/u/2711ec6c31f6?source=post_page-----ab06b87534bc--------------------------------), [Magnus Dahl](https://medium.com/u/a0f0fd84ed28?source=post_page-----ab06b87534bc--------------------------------) and [Mikael Brevik](https://medium.com/u/d2e9832e3bd5?source=post_page-----ab06b87534bc--------------------------------)."
    },
    {
      "id": 2,
      "title": "SSNs, and pattern matching in C# 9",
      "author": "Christian Brevkik",
      "content": "<img alt=\"Image for post\" class=\"t u v go aj\" src=\"https://miro.medium.com/max/6048/1\\*pbYu2gvqIsckjblaOa6WQA.jpeg\" width=\"3024\" height=\"4032\" srcSet=\"https://miro.medium.com/max/552/1\\*pbYu2gvqIsckjblaOa6WQA.jpeg 276w, https://miro.medium.com/max/1104/1\\*pbYu2gvqIsckjblaOa6WQA.jpeg 552w, https://miro.medium.com/max/1280/1\\*pbYu2gvqIsckjblaOa6WQA.jpeg 640w, https://miro.medium.com/max/1400/1\\*pbYu2gvqIsckjblaOa6WQA.jpeg 700w\" sizes=\"700px\"/>\n\nPhoto by [Jon Tyson](https://unsplash.com/@jontyson?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://medium.com/s/photos/pattern?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n\nSo I was reading the [C# 9 announcement](https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/) after an extended break from coding. Lots of cool stuff in the new version of course, I am sure a lot of people are excited about `Record`s, among other things.\n\nBut one thing especially caught my eye, and that was [the new logical](https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/#logical-patterns) and [relational operators](https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/#relational-patterns) for pattern matching.\n\nPattern matching is best known from functional languages, and it allows you to look at the “shape” of some value to see if it matches a “pattern”, and also extract information from that value. C# has gotten a lot of functional-esque goodness over the last few versions, and version 9 is no exception.\n\nThe new logical operators for pattern matching are `and`, `or` and `not`. In short, the two first operators allow you to combine multiple patterns in such a way as to form a new pattern, or negate a pattern with `not`. Some probably won’t like these keywords, but I believe you can argue their place in the language¹.\n\nThe relational operators, on the other hand, are the same ones you would use in any `if`\\-statement where you would compare sizes, normally numbers. That is to say `<`, `>`, `<=`, and `>=` can now be used in patterns. With C# 9 you can do a switch on a number like `num switch { > 10 => true, _ => false }`, and in this case `> 10` would be the relational pattern in the switch statement.\n\nThe bleeding edge\n=================\n\nAnyway, eschewing a discussion on how much people hate new keywords, or if C# needs more of them. I still think more powerful patterns like this is a good thing for the language. Since these new features caught my eye, and I like living on the bleeding edge, I wanted to test them out. But how can I test features which hasn’t even been included in the nightly build yet?\n\nSince all development for the Roslyn-compiler is [done in the open](https://github.com/dotnet/roslyn), you can actually compile the compiler, and play with some of the features yourself! I had trouble using the compiler directly though:\n\n`\n\\> dotnet ~/Dev/roslyn/artifacts/bin/csc/Debug/netcoreapp3.1/csc.dll /langVersion:preview Program.csProgram.cs(2,7): error CS0246: The type or namespace name ‘System’ could not be found (are you missing a using directive or an assembly reference?)\n`\n\nIt turns out that the Roslyn-compiler is [not supposed to be used in this manner](https://github.com/dotnet/roslyn/issues/12393#issuecomment-233435583). It cannot automatically find and link in necessary DLLs in your program code.\n\nBut I could use the C# Interactive which is also built along with the compiler, and had a lot more success trying to run a C#-script with that:\n\n`\n\\> dotnet ~/Dev/roslyn/artifacts/bin/csi/Debug/netcoreapp3.1/csi.dll /langVersion:preview Program.csxHello from the script!\n`\n\nThis enabled me to play with the new pattern matching features!\n\nThe use case\n============\n\nImmediately as I read the C# 9 announcement, I began thinking about a solution I worked on a few years ago, where we had to parse Norwegian social security numbers (ssn) for a registration process.\n\nIn Norway we have a few convoluted rules for encoding information into the ssn, which involved a lot of `if`s and `else`s in order to actually parse the information in a C# implementation.\n\nGiven the 11 digit ssn **28050389210**, the first 6 digits (**280503**) encodes the birth date, while the last 5 digits (**89210**) is called the personal number.\n\nSo if we want to get the birth date, it’s just a matter of parsing **280503** right? Well, what century is the final digits in though? Is it 1903, or 2003?\n\nThis is where the personal number (**89210**) comes in, because the three first digits (**892**) there encodes extra information about which year the person was born. The rules are as follows:\n\n1. 500–749 denotes the years 1854 till 1899\n2. 000–499 denotes the years 1900 till 1999\n3. 900–999 denotes the years 1940 till 1999\n4. 500–999 denotes the years 2000 till 2039\n\nSo looking at this list of rules, **892** hits #4, which means indeed the person was born in 2003.\n\nThe implementation\n==================\n\nIn the olden days, I would probably code this something like:\n\nOld way to parse the century\n\nWhich is fine — but it’s sort of difficult to read through and grasp the rules? With the new relational and logical operators for patterns, we could write this a bit more tersely:\n\nMy new way\n\nI’m not arguing that terse code is better, far from it. But I do find it easier to read a pattern which states that `ruleNumber` has to be `>= 500 and <= 749`, rather than an expression like `ruleNumber >= 500 && ruleNumber <= 749`. On top of that the expressions are nested in `if`\\-statements, which I find decreases readability. I’m quite sure not everybody would agree with me here though.\n\nMore than one kind\n==================\n\nYou also have several flavors of ssn’s, apart from the regular kind, you have D-, H-, and FH-numbers. These have their own rules, depending on the value of the first or third digit in the ssn. These rules are not especially difficult, and you can express them quite elegantly with pattern matching:\n\nParsing other flavors\n\nThe above rules might not make much sense without more context about why you have these sort of numbers. But that’s not important, the point is that the numbers encode more information than you might think, and these lend themselves well to pattern matching code.\n\nMore readable?\n==============\n\nI’ve also written code for parsing ssn’s for other countries like Sweden, Denmark² and Finland. And even though the Nordic countries are culturally similar and share borders, naturally each of them have their own convoluted rules for creating and parsing ssn’s.\n\nSince these are distinct, there’s not much ability to share code between the different implementations, which usually makes them verbose and less maintainable.\n\nBeing able to express such rules in a succinct and readable manner is a strength, and I think the new pattern matching operators are a step in the right direction for problems such as these.\n\n1. Don’t we already have logical operators like `&&`, `||`, and `!`? Yes — but these would introduce ambiguity when a pattern is evaluated as a boolean expression.\n2. Fun fact, since 2007, [Danish ssn’s cannot safely be validated with check digits](<https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)#New_development_in_2007>) — they ran out of numbers."
    },
    {
      "id": 3,
      "title": "Varianthusets Community Space",
      "author": "Mikael Brevik",
      "content": "Jeg er så nære å få en lang drøm oppfylt. Helt siden jeg startet med utvikling og ble involvert i forskjellige nettsamfunn og IRC-kanaler for over 15 år siden har jeg følt et sterkt indre behov for å bidra til å gjøre utvikling til en åpen og varm bransje: Hvor folk hjelper hverandre og legger til rette for felles læring og for å styrke hverandre.\n\n<img alt=\"Image for post\" class=\"t u v hw aj\" src=\"https://miro.medium.com/max/4096/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg\" width=\"2048\" height=\"1152\" srcSet=\"https://miro.medium.com/max/552/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 276w, https://miro.medium.com/max/1104/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 552w, https://miro.medium.com/max/1280/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 640w, https://miro.medium.com/max/1456/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 728w, https://miro.medium.com/max/1632/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 816w, https://miro.medium.com/max/1808/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 904w, https://miro.medium.com/max/1984/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 992w, https://miro.medium.com/max/2000/1\\*Xtv8OUezpF9EE2omFy3x\\_A.jpeg 1000w\" sizes=\"1000px\"/>\n\nLæreglede midt i gågata i Trondheim.\n\nDette har kommet frem i ulike former. Fra [forum-skriver](https://web.archive.org/web/20050814003139/http://norskwebforum.no/), [bloggdriver](https://web.archive.org/web/20070511225958/http://mikaelb.net/), [læringsassistent](http://blogg.itfag.no/2011/02/01/foreninger-joins-i-sql-del1/), [foredragsholder](https://www.youtube.com/watch?v=JNMWi7Z0Ssg), [meetup-starter](https://www.meetup.com/en-AU/BartJS/), [podcast](https://bartjs.io/tag/podcast-episode/) [host](https://kortslutning.simplecast.com/) og [videotutorial-skaper](https://kodesnutt.io/). Etterhvert har jeg gått mer og mer over til å tilrettelegge læring for andre som fagleder og nå community officer i Variant. Det som driver meg er ønsket om å utvikle meg selv og hjelpe andre lære. For meg har det egentlig ikke vært så viktig hva og hvor du lærer, men at det er i fellesskap.\n\nØnsket om å påvirke positivt i åpne fagforum har vært meg fremst i pannebrasken da [vi i Variant fikk muligheten til å innrede et nyrennovert hus](https://medium.com/variant-as/variant-flytter-74092c348caf) midt i gågata i Trondheim. En perfekt mulighet til å kunne [tilby noe helt nytt](https://medium.com/variant-as/community-space-podcast-studio-933f2e14f51) for Midt-Norge, så vidt meg bekjemt: **Assistert, åpen og tilrettelagt læreglede**. Jeg kan ikke komme på en tilsvarende tjeneste som det vi lager i Varianthuset nå. Vi har hatt muligheten til å tenke fra bar bakke, hvordan vi ønsker å best legge tilrette for læreglede for hele fagmiljøet — uansett hvem og hva.\n\n<img alt=\"Image for post\" class=\"t u v hw aj\" src=\"https://miro.medium.com/max/4096/1\\*F0hx1-gv-6McE\\_BXc2cidw.jpeg\" width=\"2048\" height=\"1152\" srcSet=\"https://miro.medium.com/max/552/1\\*F0hx1-gv-6McE\\_BXc2cidw.jpeg 276w, https://miro.medium.com/max/1104/1\\*F0hx1-gv-6McE\\_BXc2cidw.jpeg 552w, https://miro.medium.com/max/1280/1\\*F0hx1-gv-6McE\\_BXc2cidw.jpeg 640w, https://miro.medium.com/max/1400/1\\*F0hx1-gv-6McE\\_BXc2cidw.jpeg 700w\" sizes=\"700px\"/>\n\nAmfiet hvor vi kan få plass til mange for presentasjoner. Med gulvplassen vil det være mange selv med 1 meter i mellom.\n\nOg det er der drømmen min nå snart kommer i oppfyllelse. Vi nærmer oss perfekte lokaler for foredrag, workshops og til og med eget podcaststudio. Vi har fått permanent rigget til kabler som går tilrettelagt for opptak av skjermer, lyd og video, og har en plan for hvordan dette kan kobles sammen. **Resultatet er gratis lokaler, lett tilgjengelig, ferdig oppsatt for streaming og opptak**. Åpne meetups som eksempelvis BartJS kan arrangere møter og streame de til hele verden på sin egen YouTube-kanal. Helt uten noen form for forpliktelser.\n\nJeg blir revet med av den tanken. For noen kan det se ut som en liten greie, men for meg betyr det uendelig mye. Det betyr at åpne communities kan nå lengre, spre mer læreglede, og ikke minst lære mer. Nye foredragsholdere kan teste ut presentasjoner i trygge, små, omgivelser men likevel få opptak av seg selv for å utvikle seg videre. Mulighetene er enorme! Og alt har egentlig startet med et ønske, støtte fra flotte kolleger som har vært med på å skape dette og et fantastisk hus tilgjengelig for alle midt i smørøyet av Trondheim sentrum. Men intensjoner er verdt lite uten handling. Og nå fremover gjenstår det å få satt alle planer til verks, og at det er interesse for det i fagmiljøet.\n\nFremover kommer jeg til å ha en serie små bloggposter med gjennomgang av teknisk gjennomføring for å få til dette. Jeg vil dekke foredragsområde, podcaststudio og “overflow room”. Følg med på bloggen!"
    }
  ]
}
